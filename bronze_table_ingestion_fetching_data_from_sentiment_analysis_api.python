{"version":"NotebookV1","origId":354659799817986,"name":"bronze_table_ingestion_fetching_data_from_sentiment_analysis_api","language":"python","commands":[{"version":"CommandV1","origId":6866021157531582,"guid":"ac27f0c6-a687-4479-84c6-7c8edf378a5c","subtype":"command","commandType":"auto","position":1.0,"command":"from pyspark.sql import SparkSession\nfrom pyspark.sql.functions import current_timestamp, round\nfrom pyspark.sql.types import StructType, StructField, StringType, TimestampType, IntegerType, FloatType\nimport requests\nimport time\nfrom datetime import datetime\n\nquery_id = \"6863c3830cc1b17b4d95a265\"\ntoken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImF5dXNoaS5iaGFpcmFtQHR1ZGlwLmNvbSIsInVzZXJfaWQiOiI2N2I2ZWI2MmYwODE5NjkxMWY2MmUyMTkiLCJvcmdhbml6YXRpb25faWQiOiI2NmFhNjJlY2QyZmQ5ZjJiM2RhMjc5OGEiLCJleHAiOjE3NTMxNzk3NDV9.H4MT-MJOGkZE4Fyt3838AQgLo_4EPwhHn1NqfQYZrQg\"\n\n# Request headers\nrequest_headers = {\n    'accept': 'application/json',\n    'authorization': f'Bearer {token}',\n}\n\nbase_url = f'https://discover-api-dev.tellagence.ai/api/v1/analysis/post/{query_id}'\n\npayload = {\n    'start_date': '2021-08-17T18:30:00.000Z',\n    'end_date': '2025-06-30T18:29:59.999Z',\n    'data_source_type': 'YouTube Comments',\n    'page': 1,\n    'limit': 2000  # I increased to 2000 for less no. of requests (default is 10)\n}\n\n# Schema definition\nschema = StructType([\n    StructField(\"record_type\", StringType(), True),\n    StructField(\"author\", StringType(), True),\n    StructField(\"author_channel_url\", StringType(), True),\n    StructField(\"author_profile_image_url\", StringType(), True),\n    StructField(\"date\", TimestampType(), True),\n    StructField(\"like_count\", IntegerType(), True),\n    StructField(\"reply_count\", FloatType(), True),\n    StructField(\"text\", StringType(), True),\n    StructField(\"video_id\", StringType(), True),\n    StructField(\"cluster_sentiment\", StringType(), True),\n    StructField(\"cluster_sentiment_reasoning\", StringType(), True),\n    StructField(\"id\", StringType(), True),\n    StructField(\"creator\", StringType(), True),\n    StructField(\"video_title\", StringType(), True),\n    StructField(\"video_thumbnail_url\", StringType(), True),\n    StructField(\"channel_name\", StringType(), True)\n])\n\n# Fetch API data\ndef fetch_all_data():\n    spark = SparkSession.builder.getOrCreate()\n    all_data = []\n    while True:\n        response = requests.get(base_url, headers=request_headers, params=payload)\n        if response.status_code != 200:\n            raise Exception(f\"API request failed: {response.status_code}\")\n        api_data = response.json()\n        page_data = api_data.get('result', [])\n        if not page_data:\n            break\n        for record in page_data:\n            if 'date' in record and record['date']:\n                record['date'] = datetime.strptime(record['date'], '%Y-%m-%dT%H:%M:%S')\n            all_data.append(record)\n        if api_data['current_page'] >= api_data['total_pages']:\n            break\n        payload['page'] += 1\n        time.sleep(3)\n    \n    if not all_data:\n        raise Exception(\"No data fetched from API\")\n    \n    df = spark.createDataFrame(all_data, schema)\n    df = df.withColumn(\"ingestion_timestamp\", current_timestamp())\n    df = df.withColumn(\"reply_count\", round(df[\"reply_count\"], 2))  # Limit to 2 decimal places\n    return df\n\n# Execute ingestion\ntry:\n    df = fetch_all_data()\n    \n    # Save to Delta table\n    spark.sql(\"CREATE CATALOG IF NOT EXISTS youtube2\")\n    spark.sql(\"CREATE SCHEMA IF NOT EXISTS youtube2.bronze\")\n    spark.sql(\"USE CATALOG youtube2\")\n    spark.sql(\"USE SCHEMA bronze\")\n\n    df.write.format(\"delta\").mode(\"append\").saveAsTable(\"youtube2.bronze.raw_api_data\")\n\n    print(f\"Data saved to table youtube2.bronze.raw_api_data successfully\")\n\nexcept Exception as e:\n    print(f\"Error: {str(e)}\")","commandVersion":36,"state":"finished","results":{"type":"listResults","data":[{"type":"ansi","data":"Data saved to table youtube2.bronze.raw_api_data successfully\n","name":"stdout","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"df","typeStr":"pyspark.sql.connect.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"record_type","nullable":true,"type":"string"},{"metadata":{},"name":"author","nullable":true,"type":"string"},{"metadata":{},"name":"author_channel_url","nullable":true,"type":"string"},{"metadata":{},"name":"author_profile_image_url","nullable":true,"type":"string"},{"metadata":{},"name":"date","nullable":true,"type":"timestamp"},{"metadata":{},"name":"like_count","nullable":true,"type":"integer"},{"metadata":{},"name":"reply_count","nullable":true,"type":"float"},{"metadata":{},"name":"text","nullable":true,"type":"string"},{"metadata":{},"name":"video_id","nullable":true,"type":"string"},{"metadata":{},"name":"cluster_sentiment","nullable":true,"type":"string"},{"metadata":{},"name":"cluster_sentiment_reasoning","nullable":true,"type":"string"},{"metadata":{},"name":"id","nullable":true,"type":"string"},{"metadata":{},"name":"creator","nullable":true,"type":"string"},{"metadata":{},"name":"video_title","nullable":true,"type":"string"},{"metadata":{},"name":"video_thumbnail_url","nullable":true,"type":"string"},{"metadata":{},"name":"channel_name","nullable":true,"type":"string"},{"metadata":{},"name":"ingestion_timestamp","nullable":false,"type":"timestamp"}],"type":"struct"},"tableIdentifier":null}],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"baseErrorDetails":null,"workflows":[],"startTime":1752751234022,"submitTime":1752751233985,"finishTime":1752751256264,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{"rowLimit":10000,"byteLimit":2048000},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["ansi",62]],"subcommandOptions":null,"contentSha256Hex":null,"tableResultSettingsMap":{},"nuid":"dd4ec667-b314-420d-98e4-2c6f376cd174"}],"dashboards":[],"guid":"0ff44f34-12cb-4de4-8835-864066980e79","globalVars":{},"iPythonMetadata":null,"inputWidgets":{},"notebookMetadata":{"pythonIndentUnit":4,"mostRecentlyExecutedCommandWithImplicitDF":{"commandId":6866021157531587,"dataframes":["_sqldf"]}},"reposExportFormat":"JUPYTER","environmentMetadata":{"client":"2","base_environment":""},"computePreferences":null,"inputWidgetPreferences":null}